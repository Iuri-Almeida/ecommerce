version: "3.9"

services:
  eureka:
    container_name: ec-eureka
    build:
      context: ./eureka
      dockerfile: Dockerfile
    restart: always
    networks:
      - backend
    ports:
      - '8761:8761'  

  rabbitmq:
    container_name: ec-rabbitmq
    image: rabbitmq:3-management
    restart: always
    networks:
      - backend
    ports:
      - '15672:15672'

  products-db:
    container_name: ec-postgres-db
    image: postgres:14
    restart: always
    networks:
      - backend
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  orders-db:
    container_name: ec-orders-db
    image: mongo:5
    restart: always
    networks:
      - backend
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo

  users-db:
    container_name: ec-users-db
    image: mongo:5
    restart: always
    networks:
      - backend

  users:
    container_name: ec-users
    build:
      context: ./users
      dockerfile: Dockerfile
    restart: always
    networks:
      - backend
    depends_on:
      ec-eureka:
        condition: service_started      
      ec-users-db:
        condition: service_started
  
  payments:
    container_name: ec-payments
    build:
      context: ./payments
      dockerfile: Dockerfile
    restart: always
    networks:
      - backend
    depends_on:
      ec-eureka:
        condition: service_started   
      ec-rabbitmq:
        condition: service_started   

  gateway:
    container_name: ec-gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    restart: always
    networks:
      - backend
    ports:
      - '5000:5000'
    depends_on:
      ec-eureka:
        condition: service_started
      ec-users:
        condition: service_started

  prometheus:
    container_name: ec-prometheus
    image: prom/prometheus
    restart: always
    networks:
      - backend
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      ec-eureka:
        condition: service_started
      ec-gateway:
        condition: service_started

  grafana:
    container_name: ec-grafana
    image: grafana/grafana
    restart: always
    networks:
      - backend
    ports:
      - '3000:3000'
    environment:
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_HTTP_PORT=3000
      - GF_ADMIN_USER=grafana
      - GF_ADMIN_PASSWORD=grafana
    depends_on:
      ec-prometheus:
        condition: service_started

networks:
  backend:
